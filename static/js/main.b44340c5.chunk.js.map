{"version":3,"sources":["routes/history.ts","pages/mainPage/mainPage.tsx","routes/routes.tsx","app/appSlice.ts","app/app.tsx","utils/toastUtil.ts","store/apiActionMiddleware.ts","constants/httpStatusCodes.ts","store/store.ts","serviceWorker.js","index.tsx"],"names":["createBrowserHistory","MainPage","props","className","href","src","width","height","alt","title","target","rel","style","opacity","Routes","history","path","slice","createSlice","name","initialState","loading","reducers","setLoading","state","action","Boolean","payload","data","selectLoading","app","actions","App","useSelector","Number","process","fallback","errorOptions","autoClose","TYPES","apiActionMiddleware","store","next","type","String","substr","lastIndexOf","code","push","message","toast","error","showErrorToast","handleApiError","configureStore","reducer","appReducer","middleware","getDefaultMiddleware","serializableCheck","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b44340c5.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()\n","import React from 'react'\nimport './mainPage.scss'\n\nexport default function MainPage(props: any) {\n  return (\n    <>\n      <section className=\"page-header\">\n        <h1 className=\"project-name font-weight-bold\">Ajeet Shah</h1>\n      </section>\n\n      <section className=\"main-content\">\n        <h2 className=\"sub-heading\">About</h2>\n        <p className=\"text-content\">Software Engineer</p>\n      </section>\n\n      <section className=\"main-content\">\n        <h2 className=\"sub-heading\">Experience</h2>\n        <p className=\"text-content\">\n          <a href=\"https://www.talentica.com/\" className=\"text-info\">\n            Talentica Software\n          </a>\n          , Senior Software Engineer\n        </p>\n        <p className=\"text-content\">\n          <a href=\"https://www.accenture.com/\" className=\"text-info\">\n            {' '}\n            Accenture Services\n          </a>\n          , Senior Software Engineer\n        </p>\n        <p className=\"text-content\">Fourace Software, Software Engineer</p>\n      </section>\n\n      <section className=\"main-content\">\n        <h2 className=\"sub-heading\">Education</h2>\n        <p className=\"text-content\">\n          <a href=\"https://www.iitk.ac.in/\" className=\"text-info\">\n            Indian Institute of Technology Kanpur\n          </a>\n          , B.Tech., Civil Engineering\n        </p>\n      </section>\n\n      <section className=\"main-content\">\n        <h2 className=\"sub-heading\">Web</h2>\n        <span className=\"text-content\">\n          <a href=\"https://stackoverflow.com/users/2873538/ajeet-shah\">\n            <img\n              src=\"https://stackoverflow.com/users/flair/2873538.png?theme=default\"\n              width=\"208\"\n              height=\"58\"\n              alt=\"profile for Ajeet Shah at Stack Overflow, Q&amp;A for professional and enthusiast programmers\"\n              title=\"profile for Ajeet Shah at Stack Overflow, Q&amp;A for professional and enthusiast programmers\"\n            />\n          </a>\n        </span>\n        <span className=\"text-content\">\n          <a href=\"https://codesandbox.io/u/ajeetshah\" className=\"text-info\">\n            CodeSandbox\n          </a>\n        </span>\n        <span className=\"text-content\">\n          <a href=\"https://www.linkedin.com/in/ajeetshah/\" className=\"text-info\">\n            Linkedin\n          </a>\n        </span>\n        <span className=\"text-content\">\n          <a href=\"https://github.com/ajeetshah/\" className=\"text-info\">\n            Github\n          </a>\n        </span>\n        <span className=\"text-content\">\n          <a href=\"https://www.npmjs.com/~iamajeets\" className=\"text-info\">\n            NPM\n          </a>\n        </span>\n      </section>\n\n      <section className=\"main-content\">\n        <h2 className=\"sub-heading\">Hobby</h2>\n        <span className=\"text-content\">\n          <a\n            href=\"https://www.goodreads.com/user/show/61644341-ajeet-shah\"\n            className=\"text-info\"\n          >\n            Reading books\n          </a>\n        </span>\n        <span className=\"text-content\">Programming</span>\n        <span className=\"text-content\">Rubik's cube</span>\n      </section>\n\n      <section className=\"main-content\">\n        <h2 className=\"sub-heading\">Social</h2>\n        <span className=\"text-content\">\n          <a href=\"https://twitter.com/shahajeet\" className=\"text-info\">\n            Twitter\n          </a>\n        </span>\n        <span className=\"text-content\">\n          <a href=\"https://instagram.com/iamajeets/\" className=\"text-info\">\n            Instagram\n          </a>\n        </span>\n      </section>\n\n      <section className=\"footer-content\"></section>\n      <a\n        href=\"https://www.webfreecounter.com/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <img\n          style={{ opacity: 0.1 }}\n          src=\"https://www.webfreecounter.com/hit.php?id=gvakfqq&nd=4&style=1\"\n          alt=\"visitor counter\"\n        />\n      </a>\n    </>\n  )\n}\n","import React from 'react'\nimport { Router, Switch, Route } from 'react-router-dom'\nimport history from './history'\nimport MainPage from '../pages/mainPage/mainPage'\n\nexport default function Routes() {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/\">\n          <MainPage />\n        </Route>\n        {/* {pathComponents.map((item) => (\n          <Route exact key={item.path} path={item.path}>\n            <item.component />\n          </Route>\n        ))} */}\n      </Switch>\n    </Router>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { StoreState } from '../store/store'\n\nexport interface App {\n  loading: boolean\n}\n\nexport const slice = createSlice({\n  name: 'app',\n  initialState: {\n    loading: false,\n  },\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = Boolean(action.payload.data)\n    },\n  },\n})\n\nexport const selectLoading = (state: StoreState) => state.app.loading\n\nexport const { setLoading } = slice.actions\n\nexport default slice.reducer\n","import React, { Suspense } from 'react'\nimport Routes from '../routes/routes'\n// import ReLoader from '../common/reLoader'\nimport { selectLoading } from './appSlice'\nimport { useSelector } from 'react-redux'\n// import { ToastContainer } from 'react-toastify'\n\nexport default function App(props: {}) {\n  const loading = useSelector(selectLoading)\n  const toastDuration = Number(process.env.REACT_APP_TOAST_DURATION || 5000)\n\n  return (\n    <Suspense fallback={<>Loading...</>}>\n      {/* <ToastContainer autoClose={toastDuration} toastClassName=\"f-14\" /> */}\n      {/* <ReLoader loading={loading} /> */}\n      <Routes />\n    </Suspense>\n  )\n}\n","import { toast, CommonOptions } from 'react-toastify'\n\nconst errorOptions: CommonOptions = {\n  autoClose: false,\n}\n\nexport function showErrorToast(message: string) {\n  toast.error(message, errorOptions)\n}\n\nexport function showSuccessToast(message: string) {\n  toast.success(message)\n}\n","import { Action } from '@reduxjs/toolkit'\nimport { AxiosResponse } from 'axios'\nimport { setLoading } from '../app/appSlice'\nimport {\n  httpBadGateway,\n  httpBadRequest,\n  httpGatewayTimeout,\n  httpNotFound,\n  httpServerError,\n  httpUnauthenticated,\n} from '../constants/httpStatusCodes'\nimport history from '../routes/history'\nimport { showErrorToast } from '../utils/toastUtil'\n\nconst TYPES = {\n  pending: 'pending',\n  fulfilled: 'fulfilled',\n  rejected: 'rejected',\n}\n\nconst apiActionMiddleware = (store) => (next) => (action: Action) => {\n  const type = String(action.type)\n\n  switch (type.substr(type.lastIndexOf('/') + 1)) {\n    case TYPES.pending:\n      next(setLoading({ data: true }))\n      break\n    case TYPES.rejected:\n      next(setLoading({ data: false }))\n      handleApiError(action, next)\n      break\n    case TYPES.fulfilled:\n      next(setLoading({ data: false }))\n      break\n  }\n\n  return next(action)\n}\n\nfunction handleApiError(action: any, next) {\n  switch (action.code) {\n    case httpBadRequest:\n      break\n    case httpUnauthenticated:\n      doLogout(next)\n      break\n    case httpNotFound:\n      break\n    case httpServerError:\n      break\n    case httpBadGateway:\n      break\n    case httpGatewayTimeout:\n      break\n  }\n  const payload: AxiosResponse = action && action.payload\n  const message = payload && payload.data && payload.data.message\n  message && showErrorToast(message)\n}\n\nfunction doLogout(next) {\n  history.push('/')\n}\n\nexport default apiActionMiddleware\n","export const httpOk = '200'\nexport const httpBadRequest = '400'\nexport const httpUnauthenticated = '401'\nexport const httpNotFound = '404'\nexport const httpServerError = '500'\nexport const httpBadGateway = '502'\nexport const httpGatewayTimeout = '502'\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport apiActionMiddleware from './apiActionMiddleware'\n\nimport appReducer, { App } from '../app/appSlice'\n\nexport interface StoreState {\n  app: App\n}\n\nconst store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n    apiActionMiddleware,\n  ],\n})\n\nexport default store\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\nimport './styles/index.scss'\nimport ReactDOM from 'react-dom'\nimport App from './app/app'\nimport store from './store/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n// import { IntlProvider } from 'react-intl'\n// import messages from './translations/messages'\n// import serialize from 'serialize-javascript'\n\n// const language = navigator.language.split(/[-_]/)[0]\n\n// console.log(serialize(window['SERVER_DATA'])) // Using server data after serializing\n\nReactDOM.render(\n  // <IntlProvider defaultLocale=\"en\" locale={language} messages={messages[language]}>\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  // </IntlProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}